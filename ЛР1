#1 // Выбрать тему, построить ER модель предметной области - 3-4 таблицы в 3НФ: 

Table drivers {
  DriverId integer [primary key]
  LastName varchar
  FirstName varchar
  Patronymic varchar
  Experience integer
}

Table Routes {
  RouteId integer [primary key]
  RouteName varchar
  Distance integer 
  DriverPayment integer 
}

Table Shipments {
  ShipmentId integer [primary key]
  RouteId integer
  DriverId integer
  DepartureDate timestamp
  ArrivalDate timestamp
  Bonus integer
}

Ref: Shipments.DriverId > drivers.DriverId // many-to-one
Ref: Shipments.RouteId > Routes.RouteId 



#2 // Выбрать независимую сущность с наибольшим числом полей:
Выбрал сущность drivers - водитель



#3 // Построить полный класс этой сущности. Обеспечить инкапсуляцию ВСЕХ полей:

class Driver:
    def __init__(self, driver_id: int, last_name: str, first_name: str, patronymic: str, experience: int):
        self.__driver_id = driver_id
        self.__last_name = last_name
        self.__first_name = first_name
        self.__patronymic = patronymic
        self.__experience = experience
    
    # Getters
    def get_driver_id(self):
        return self.__driver_id
    def get_last_name(self):
        return self.__last_name
    def get_first_name(self):
        return self.__first_name
    def get_patronymic(self):
        return self.__patronymic
    def get_experience(self):
        return self.__experience
    
    # Setters
    def set_driver_id(self, driver_id: int):
        self.__driver_id = driver_id
    def set_last_name(self, last_name: str):
        self.__last_name = last_name
    def set_first_name(self, first_name: str):
        self.__first_name = first_name
    def set_patronymic(self, patronymic: str):
        self.__patronymic = patronymic
    def set_experience(self, experience: int):
        if experience >= 0:
            self.__experience = experience
        else:
            raise ValueError("Опыт не может быть меньше 0")
    
    # Cтроковое представление информации о водителе 
    def __str__(self):
        return (f"Driver ID: {self.__driver_id}, Name: {self.__last_name} {self.__first_name} {self.__patronymic}, "
                f"Experience: {self.__experience} years")



#4 // Сделать методы класса (статические) валидации всех необходимых полей. Сделать так, чтобы существование объекта с неразрешёнными полями было невозможно.

class Driver:
    def __init__(self, driver_id: int, last_name: str, first_name: str, patronymic: str, experience: int):
        # Проверка всех полей с помощью статических методов
        if self.validate_driver_id(driver_id) and \
           self.validate_name(last_name) and \
           self.validate_name(first_name) and \
           self.validate_name(patronymic) and \
           self.validate_experience(experience):
            self.__driver_id = driver_id
            self.__last_name = last_name
            self.__first_name = first_name
            self.__patronymic = patronymic
            self.__experience = experience
        else:
            raise ValueError("Invalid field values provided")

    # Статический метод для проверки идентификатора водителя
    @staticmethod
    def validate_driver_id(driver_id: int) -> bool:
        return isinstance(driver_id, int) and driver_id > 0

    # Статический метод для проверки имени, фамилии, отчества
    @staticmethod
    def validate_name(name: str) -> bool:
        return isinstance(name, str) and len(name.strip()) > 0

    # Статический метод для проверки опыта водителя
    @staticmethod
    def validate_experience(experience: int) -> bool:
        return isinstance(experience, int) and experience >= 0
    
    # Getters
    def get_driver_id(self):
        return self.__driver_id
    def get_last_name(self):
        return self.__last_name
    def get_first_name(self):
        return self.__first_name
    def get_patronymic(self):
        return self.__patronymic
    def get_experience(self):
        return self.__experience
    
    # Setters с валидацией
    def set_driver_id(self, driver_id: int):
        if self.validate_driver_id(driver_id):
            self.__driver_id = driver_id
        else:
            raise ValueError("Invalid Driver ID")
    def set_last_name(self, last_name: str):
        if self.validate_name(last_name):
            self.__last_name = last_name
        else:
            raise ValueError("Invalid last name")
    def set_first_name(self, first_name: str):
        if self.validate_name(first_name):
            self.__first_name = first_name
        else:
            raise ValueError("Invalid first name")
    def set_patronymic(self, patronymic: str):
        if self.validate_name(patronymic):
            self.__patronymic = patronymic
        else:
            raise ValueError("Invalid patronymic")
    def set_experience(self, experience: int):
        if self.validate_experience(experience):
            self.__experience = experience
        else:
            raise ValueError("Invalid experience value")
    
    # Cтроковое представление информации о водителе
    def __str__(self):
        return (f"Driver ID: {self.__driver_id}, Name: {self.__last_name} {self.__first_name} {self.__patronymic}, "
                f"Experience: {self.__experience} years")



#5 // Убрать повтор кода из пункта 4

class Driver:
    def __init__(self, driver_id: int, last_name: str, first_name: str, patronymic: str, experience: int):
        # Валидация полей при создании объекта
        self.set_driver_id(driver_id)
        self.set_last_name(last_name)
        self.set_first_name(first_name)
        self.set_patronymic(patronymic)
        self.set_experience(experience)
    
    # Универсальный статический метод для проверки строковых полей
    @staticmethod
    def validate_string(value: str, field_name: str) -> bool:
        if not isinstance(value, str) or len(value.strip()) == 0:
            raise ValueError(f"{field_name} must be a non-empty string")
        return True

    # Статический метод для проверки идентификатора водителя
    @staticmethod
    def validate_driver_id(driver_id: int) -> bool:
        if not isinstance(driver_id, int) or driver_id <= 0:
            raise ValueError("Driver ID must be a positive integer")
        return True

    # Статический метод для проверки опыта водителя
    @staticmethod
    def validate_experience(experience: int) -> bool:
        if not isinstance(experience, int) or experience < 0:
            raise ValueError("Experience must be a non-negative integer")
        return True

    # Getters
    def get_driver_id(self):
        return self.__driver_id
    def get_last_name(self):
        return self.__last_name
    def get_first_name(self):
        return self.__first_name
    def get_patronymic(self):
        return self.__patronymic
    def get_experience(self):
        return self.__experience

    # Setters с валидацией
    def set_driver_id(self, driver_id: int):
        self.validate_driver_id(driver_id)
        self.__driver_id = driver_id
    def set_last_name(self, last_name: str):
        self.validate_string(last_name, "Last name")
        self.__last_name = last_name
    def set_first_name(self, first_name: str):
        self.validate_string(first_name, "First name")
        self.__first_name = first_name
    def set_patronymic(self, patronymic: str):
        self.validate_string(patronymic, "Patronymic")
        self.__patronymic = patronymic
    def set_experience(self, experience: int):
        self.validate_experience(experience)
        self.__experience = experience

    # Cтроковое представление информации о водителе
    def __str__(self):
        return (f"Driver ID: {self.__driver_id}, Name: {self.__last_name} {self.__first_name} {self.__patronymic}, "
                f"Experience: {self.__experience} years")



#6 // Обеспечить перегрузку контруктора для нетривиальных примеров (строка, JSON и тд)

import json

class Driver:
    def __init__(self, driver_id=None, last_name=None, first_name=None, patronymic=None, experience=None):
        if isinstance(driver_id, str):
            # Инициализация из строки
            self.initialize_from_string(driver_id)
        elif isinstance(driver_id, dict):
            # Инициализация из JSON (словарь)
            self.initialize_from_json(driver_id)
        else:
            # Инициализация из отдельных параметров
            self.set_driver_id(driver_id)
            self.set_last_name(last_name)
            self.set_first_name(first_name)
            self.set_patronymic(patronymic)
            self.set_experience(experience)

    # Инициализация из строки
    def initialize_from_string(self, data_str: str):
        data = data_str.split(',')
        if len(data) != 5:
            raise ValueError("String must contain exactly 5 values: driver_id,last_name,first_name,patronymic,experience")
        
        driver_id, last_name, first_name, patronymic, experience = data
        self.set_driver_id(int(driver_id))
        self.set_last_name(last_name.strip())
        self.set_first_name(first_name.strip())
        self.set_patronymic(patronymic.strip())
        self.set_experience(int(experience))

    # Инициализация из JSON (словаря)
    def initialize_from_json(self, json_data: dict):
        self.set_driver_id(json_data.get('driver_id'))
        self.set_last_name(json_data.get('last_name'))
        self.set_first_name(json_data.get('first_name'))
        self.set_patronymic(json_data.get('patronymic'))
        self.set_experience(json_data.get('experience'))

    # Статические методы для валидации
    @staticmethod
    def validate_string(value: str, field_name: str) -> bool:
        if not isinstance(value, str) or len(value.strip()) == 0:
            raise ValueError(f"{field_name} must be a non-empty string")
        return True

    @staticmethod
    def validate_driver_id(driver_id: int) -> bool:
        if not isinstance(driver_id, int) or driver_id <= 0:
            raise ValueError("Driver ID must be a positive integer")
        return True

    @staticmethod
    def validate_experience(experience: int) -> bool:
        if not isinstance(experience, int) or experience < 0:
            raise ValueError("Experience must be a non-negative integer")
        return True

    # Getters
    def get_driver_id(self):
        return self.__driver_id
    def get_last_name(self):
        return self.__last_name
    def get_first_name(self):
        return self.__first_name
    def get_patronymic(self):
        return self.__patronymic
    def get_experience(self):
        return self.__experience

    # Setters с валидацией
    def set_driver_id(self, driver_id: int):
        self.validate_driver_id(driver_id)
        self.__driver_id = driver_id
    def set_last_name(self, last_name: str):
        self.validate_string(last_name, "Last name")
        self.__last_name = last_name
    def set_first_name(self, first_name: str):
        self.validate_string(first_name, "First name")
        self.__first_name = first_name
    def set_patronymic(self, patronymic: str):
        self.validate_string(patronymic, "Patronymic")
        self.__patronymic = patronymic
    def set_experience(self, experience: int):
        self.validate_experience(experience)
        self.__experience = experience

    # Cтроковое представление информации о водителе
    def __str__(self):
        return (f"Driver ID: {self.__driver_id}, Name: {self.__last_name} {self.__first_name} {self.__patronymic}, "
                f"Experience: {self.__experience} years")
